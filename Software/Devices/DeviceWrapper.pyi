from typing import List, Callable
from logging import Logger

class DeviceWrapper:
    def __init__(self, port: str = '/dev/ttyUSB0') -> None: ...
    def destroy(self) -> None: ...
    def set_memory_to(self, word: bytes) -> None: ...
    def get_samples(self) -> List[int]: ...
    def get_sample_offset(self) -> int: ...
    def get_trig_lvl(self) -> int: ...
    def set_trig_lvl(self, level: int) -> None: ...
    def get_trigger_mode(self) -> int: ...
    def set_trigger_mode(self, mode: bytes) -> None: ...
    def set_bound(self, upper: int, lower: int) -> None: ...
    def activate_scope(self, sampling_callback: Callable, done_callback: Callable) -> None: ...

    _log: Logger
    
    trig_max: int
    trig_min: int
    trig_step: int
    sample_count: int
